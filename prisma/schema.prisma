// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DEVELOPMENT_URL")
}

model User {
  id                Int          @id @default(autoincrement())
  firstName         String
  lastName          String
  image             String       @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQB0a9Vv--jOowQtVo_DNHzY7CvSizocuT8pA&usqp=CAU")
  email             String       @unique
  password          String
  phone             String?
  role              String       @default("student")
  isBlocked         Boolean      @default(false)
  registeredAt      DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  enrolledCourses   Course[]
  myCourses         Course[]     @relation("CreatedByUser") // Courses that the user (instructor) created
  gradedAssessments Assessment[] @relation("GradedAssessments")
  assessment        Assessment[] @relation("OwnedStudent")

  submission Submission[]
}

model CourseCategory {
  id     Int      @id @default(autoincrement())
  title  String
  slug   String   @unique
  Course Course[]
}

model Course {
  id           Int              @id @default(autoincrement())
  title        String
  slug         String           @unique
  description  String?
  image        String?
  price        Decimal
  paid         Boolean
  totalHours   String?
  enrolls      Int
  isFeatured   Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now())
  categoryId   Int?
  category     CourseCategory[]
  userId       Int?
  User         User[]
  instructorId Int // Instructor ID
  instructor   User             @relation("CreatedByUser", fields: [instructorId], references: [id]) // Relationship with the instructor
  sections     Section[]
}

model Section {
  id          Int          @id @default(autoincrement())
  courseId    Int
  title       String
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  assessments Assessment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Lesson {
  id           Int      @id @default(autoincrement())
  sectionId    Int
  source       String
  free_preview Boolean  @default(false)
  title        String
  type         String
  duration     String
  section      Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  video_link   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Assessment {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  content     String // Content of the assessment (questions, instructions, etc.)
  sectionId   Int
  section     Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  submissions Submission[]
  gradedBy    User?        @relation("GradedAssessments", fields: [gradedById], references: [id])
  student     User?        @relation("OwnedStudent", fields: [studentId], references: [id])
  studentId   Int?
  gradedById  Int?
  gradedAt    DateTime?
  points      Int?         @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Submission {
  id           Int        @id @default(autoincrement())
  assessmentId Int
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  studentId    Int
  points       Int?
  student      User       @relation(fields: [studentId], references: [id])
  submittedAt  DateTime   @default(now())
  content      String // student's submitted work
}
